// // api/v1/user/
// userRouter.get("/:id", getUsersController)

export const getUserController = async (req, res) => {
	const { id } = req.params;
	try {
		const user = await User.findById(id);

		if (!user) return next(appErr("Usuário não encontrado", 401));

		res.status(200).json({
			message: "true",
			data: user,
		});
	} catch (error) {
		next(appErr(error.message));
	}
};


====================================
1. Códigos de Sucesso (2xx)

Indicam que a requisição foi bem-sucedida.

    200 OK
    Usado para requisições bem-sucedidas com resposta.
    Exemplo: Obter um recurso, como GET /users/1.

    201 Created
    Usado quando um novo recurso é criado.
    Exemplo: Criar um usuário com POST /users.

    204 No Content
    Usado para operações bem-sucedidas que não retornam conteúdo.
    Exemplo: Deletar um recurso com DELETE /users/1.

2. Códigos de Redirecionamento (3xx)

Indicam que a solicitação precisa de ação adicional, mas são raramente usados em APIs RESTful.

    304 Not Modified
    Usado para indicar que o recurso não mudou desde a última requisição (geralmente usado com cache).

3. Códigos de Erros do Cliente (4xx)

Indicam que há um problema na solicitação feita pelo cliente.

    400 Bad Request
    Usado quando há erro de validação ou dados inválidos enviados na requisição.
    Exemplo: Dados ausentes ou formato inválido no POST /users.

    401 Unauthorized
    Usado quando a autenticação é necessária e não foi fornecida ou falhou.
    Exemplo: Falta de token em Authorization no cabeçalho.

    403 Forbidden
    Usado quando o cliente não tem permissão para acessar o recurso.
    Exemplo: Tentar acessar /admin sem as credenciais adequadas.

    404 Not Found
    Usado quando o recurso solicitado não existe.
    Exemplo: Recurso não encontrado em GET /users/9999.

    422 Unprocessable Entity
    Usado quando a requisição é compreensível, mas não pode ser processada.
    Exemplo: Falha de validação ao criar um usuário com POST /users.

4. Códigos de Erros do Servidor (5xx)

Indicam que o problema está no servidor.

    500 Internal Server Error
    Usado para erros inesperados no servidor. Deve ser evitado sempre que possível em APIs bem projetadas.

    502 Bad Gateway
    Usado quando o servidor atua como gateway ou proxy e recebe uma resposta inválida de um servidor upstream.

    503 Service Unavailable
    Usado quando o servidor está temporariamente indisponível (por exemplo, em manutenção).

Códigos Mais Comuns em uma API RESTful

    200: Requisição bem-sucedida.
    201: Recurso criado.
    204: Operação bem-sucedida sem retorno.
    400: Dados inválidos na requisição.
    401: Falha de autenticação.
    403: Acesso proibido.
    404: Recurso não encontrado.
    500: Erro interno do servidor.